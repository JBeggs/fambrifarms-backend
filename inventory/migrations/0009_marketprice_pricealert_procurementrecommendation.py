# Generated by Django 5.0.9 on 2025-09-14 17:07

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0008_stockanalysis_stockanalysisitem'),
        ('products', '0009_productalert_recipe_delete_businesshours_and_more'),
        ('suppliers', '0004_add_price_list_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MarketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_name', models.CharField(help_text="Name of the market/supplier (e.g., 'Tshwane Market')", max_length=100)),
                ('invoice_date', models.DateField(help_text='Date of the market invoice')),
                ('invoice_reference', models.CharField(blank=True, help_text='Invoice number or reference', max_length=100)),
                ('product_name', models.CharField(help_text='Product name as it appears on invoice', max_length=200)),
                ('unit_price_excl_vat', models.DecimalField(decimal_places=2, help_text='Unit price excluding VAT', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('vat_amount', models.DecimalField(decimal_places=2, help_text='VAT amount per unit', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('unit_price_incl_vat', models.DecimalField(decimal_places=2, help_text='Unit price including VAT', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('quantity_unit', models.CharField(default='each', help_text='Unit of measurement (each, kg, box, etc.)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this price record is active')),
                ('matched_product', models.ForeignKey(blank=True, help_text='Matched product in our system', null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.product')),
            ],
            options={
                'db_table': 'inventory_market_price',
                'ordering': ['-invoice_date', '-created_at'],
                'indexes': [models.Index(fields=['supplier_name', 'invoice_date'], name='inventory_m_supplie_b92203_idx'), models.Index(fields=['product_name'], name='inventory_m_product_310b4c_idx'), models.Index(fields=['matched_product', 'invoice_date'], name='inventory_m_matched_db5410_idx')],
                'unique_together': {('supplier_name', 'invoice_date', 'product_name')},
            },
        ),
        migrations.CreateModel(
            name='PriceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('price_spike', 'Price Spike'), ('price_drop', 'Price Drop'), ('volatility', 'High Volatility'), ('trend_change', 'Trend Change')], help_text='Type of price alert', max_length=20)),
                ('threshold_percentage', models.DecimalField(decimal_places=2, help_text='Percentage threshold for alert trigger', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('baseline_price', models.DecimalField(decimal_places=2, help_text='Baseline price for comparison', max_digits=10)),
                ('current_price', models.DecimalField(decimal_places=2, help_text='Current market price that triggered alert', max_digits=10)),
                ('price_change_percentage', models.DecimalField(decimal_places=2, help_text='Percentage change from baseline', max_digits=5)),
                ('alert_triggered_at', models.DateTimeField(auto_now_add=True)),
                ('is_acknowledged', models.BooleanField(default=False, help_text='Whether alert has been acknowledged')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('recommended_action', models.TextField(blank=True, help_text='AI-generated recommendation based on price change')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
            options={
                'db_table': 'inventory_price_alert',
                'ordering': ['-alert_triggered_at'],
                'indexes': [models.Index(fields=['product', 'alert_type'], name='inventory_p_product_9ca639_idx'), models.Index(fields=['is_acknowledged', 'alert_triggered_at'], name='inventory_p_is_ackn_e3dc40_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProcurementRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommended_quantity', models.DecimalField(decimal_places=2, help_text='Recommended quantity to procure', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('current_market_price', models.DecimalField(blank=True, decimal_places=2, help_text='Latest market price for this product', max_digits=10, null=True)),
                ('average_market_price_30d', models.DecimalField(blank=True, decimal_places=2, help_text='30-day average market price', max_digits=10, null=True)),
                ('price_trend', models.CharField(choices=[('rising', 'Rising'), ('falling', 'Falling'), ('stable', 'Stable'), ('volatile', 'Volatile')], default='stable', help_text='Price trend analysis', max_length=20)),
                ('urgency_level', models.CharField(choices=[('low', 'Low - Normal Reorder'), ('medium', 'Medium - Stock Running Low'), ('high', 'High - Critical Shortage'), ('urgent', 'Urgent - Out of Stock')], help_text='Procurement urgency level', max_length=20)),
                ('recommended_order_date', models.DateField(help_text='Recommended date to place order')),
                ('expected_delivery_date', models.DateField(blank=True, help_text='Expected delivery date', null=True)),
                ('estimated_total_cost', models.DecimalField(decimal_places=2, help_text='Estimated total cost for recommended quantity', max_digits=12)),
                ('potential_savings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Potential savings vs. alternative suppliers', max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('ordered', 'Order Placed'), ('received', 'Received'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('recommended_supplier', models.ForeignKey(blank=True, help_text='Recommended supplier based on price and reliability', null=True, on_delete=django.db.models.deletion.SET_NULL, to='suppliers.supplier')),
                ('stock_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='procurement_recommendations', to='inventory.stockanalysis')),
            ],
            options={
                'db_table': 'inventory_procurement_recommendation',
                'ordering': ['-urgency_level', '-created_at'],
                'indexes': [models.Index(fields=['status', 'urgency_level'], name='inventory_p_status_a15be4_idx'), models.Index(fields=['recommended_order_date'], name='inventory_p_recomme_42fee6_idx'), models.Index(fields=['product', 'status'], name='inventory_p_product_27ee13_idx')],
            },
        ),
    ]

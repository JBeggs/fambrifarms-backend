# Generated by Django 5.0.9 on 2025-09-14 17:14

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0009_marketprice_pricealert_procurementrecommendation'),
        ('products', '0009_productalert_recipe_delete_businesshours_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the pricing rule (e.g., 'Premium Restaurants', 'Budget Cafes')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of when and how this rule applies')),
                ('customer_segment', models.CharField(choices=[('premium', 'Premium Restaurants'), ('standard', 'Standard Restaurants'), ('budget', 'Budget Cafes'), ('wholesale', 'Wholesale Buyers'), ('retail', 'Retail Customers')], help_text='Customer segment this rule applies to', max_length=50)),
                ('base_markup_percentage', models.DecimalField(decimal_places=2, help_text='Base markup percentage (e.g., 25.00 for 25%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('volatility_adjustment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Additional markup for volatile products (e.g., 10.00 for +10%)', max_digits=5)),
                ('minimum_margin_percentage', models.DecimalField(decimal_places=2, help_text='Minimum margin to maintain (e.g., 15.00 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('category_adjustments', models.JSONField(default=dict, help_text="Category-specific markup adjustments (e.g., {'vegetables': 20, 'fruits': 30})")),
                ('trend_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Multiplier for trending products (e.g., 1.20 for +20%)', max_digits=4)),
                ('seasonal_adjustment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Seasonal price adjustment percentage', max_digits=5)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pricing rule is currently active')),
                ('effective_from', models.DateField(help_text='Date from which this rule becomes effective')),
                ('effective_until', models.DateField(blank=True, help_text='Date until which this rule is effective (null = indefinite)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'inventory_pricing_rule',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerPriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_name', models.CharField(help_text="Name of the price list (e.g., 'Weekly Price List - 2023-09-11')", max_length=200)),
                ('effective_from', models.DateField(help_text='Date from which these prices are effective')),
                ('effective_until', models.DateField(help_text='Date until which these prices are effective')),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('based_on_market_data', models.DateField(help_text='Date of market data this price list is based on')),
                ('market_data_source', models.CharField(default='Tshwane Market', help_text="Source of market data (e.g., 'Tshwane Market')", max_length=100)),
                ('total_products', models.IntegerField(default=0, help_text='Total number of products in this price list')),
                ('average_markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average markup percentage across all products', max_digits=5)),
                ('total_list_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total value of all products in the price list', max_digits=12)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('generated', 'Generated'), ('sent', 'Sent to Customer'), ('acknowledged', 'Acknowledged by Customer'), ('active', 'Active'), ('expired', 'Expired')], default='draft', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this price list')),
                ('customer', models.ForeignKey(help_text='Customer this price list is for', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_price_lists', to=settings.AUTH_USER_MODEL)),
                ('pricing_rule', models.ForeignKey(help_text='Pricing rule used to generate this list', on_delete=django.db.models.deletion.CASCADE, to='inventory.pricingrule')),
            ],
            options={
                'db_table': 'inventory_customer_price_list',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyPriceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_week_start', models.DateField(help_text='Monday of the report week')),
                ('report_week_end', models.DateField(help_text='Sunday of the report week')),
                ('report_name', models.CharField(help_text="Name of the report (e.g., 'Weekly Price Report - Week 37, 2023')", max_length=200)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('total_market_prices_analyzed', models.IntegerField(default=0, help_text='Total number of market prices analyzed')),
                ('average_market_volatility', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average price volatility percentage', max_digits=5)),
                ('most_volatile_product', models.CharField(blank=True, help_text='Product with highest price volatility', max_length=200)),
                ('most_volatile_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Highest volatility percentage', max_digits=5)),
                ('total_price_lists_generated', models.IntegerField(default=0, help_text='Number of customer price lists generated')),
                ('total_customers_affected', models.IntegerField(default=0, help_text='Number of customers with price changes')),
                ('average_price_increase', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average price increase percentage', max_digits=5)),
                ('total_procurement_recommendations', models.IntegerField(default=0, help_text='Number of procurement recommendations generated')),
                ('estimated_procurement_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated total procurement cost', max_digits=12)),
                ('potential_savings_identified', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Potential savings identified through smart procurement', max_digits=10)),
                ('key_insights', models.JSONField(default=list, help_text='Key insights and recommendations from the analysis')),
                ('status', models.CharField(choices=[('generating', 'Generating'), ('completed', 'Completed'), ('distributed', 'Distributed'), ('archived', 'Archived')], default='generating', max_length=20)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'inventory_weekly_price_report',
                'ordering': ['-report_week_start'],
            },
        ),
        migrations.CreateModel(
            name='CustomerPriceListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_price_excl_vat', models.DecimalField(decimal_places=2, help_text='Market price excluding VAT', max_digits=10)),
                ('market_price_incl_vat', models.DecimalField(decimal_places=2, help_text='Market price including VAT', max_digits=10)),
                ('market_price_date', models.DateField(help_text='Date of the market price data')),
                ('markup_percentage', models.DecimalField(decimal_places=2, help_text='Applied markup percentage', max_digits=5)),
                ('customer_price_excl_vat', models.DecimalField(decimal_places=2, help_text='Customer price excluding VAT', max_digits=10)),
                ('customer_price_incl_vat', models.DecimalField(decimal_places=2, help_text='Customer price including VAT', max_digits=10)),
                ('previous_price', models.DecimalField(blank=True, decimal_places=2, help_text='Previous customer price for comparison', max_digits=10, null=True)),
                ('price_change_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage change from previous price', max_digits=5)),
                ('unit_of_measure', models.CharField(default='each', help_text='Unit of measurement', max_length=50)),
                ('product_category', models.CharField(blank=True, help_text='Product category for reporting', max_length=100)),
                ('is_volatile', models.BooleanField(default=False, help_text='Whether this product has volatile pricing')),
                ('is_seasonal', models.BooleanField(default=False, help_text='Whether this product is seasonal')),
                ('is_premium', models.BooleanField(default=False, help_text='Whether this is a premium product')),
                ('price_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.customerpricelist')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
            options={
                'db_table': 'inventory_customer_price_list_item',
                'ordering': ['product__name'],
                'indexes': [models.Index(fields=['price_list', 'product'], name='inventory_c_price_l_8c725d_idx'), models.Index(fields=['is_volatile', 'price_change_percentage'], name='inventory_c_is_vola_e5bf2a_idx')],
                'unique_together': {('price_list', 'product')},
            },
        ),
        migrations.AddIndex(
            model_name='pricingrule',
            index=models.Index(fields=['customer_segment', 'is_active'], name='inventory_p_custome_5aee14_idx'),
        ),
        migrations.AddIndex(
            model_name='pricingrule',
            index=models.Index(fields=['effective_from', 'effective_until'], name='inventory_p_effecti_bc8f2d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['customer', 'effective_from'], name='inventory_c_custome_40a62b_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['status', 'effective_from'], name='inventory_c_status_27768f_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['generated_at'], name='inventory_c_generat_2e771b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customerpricelist',
            unique_together={('customer', 'effective_from')},
        ),
        migrations.AddIndex(
            model_name='weeklypricereport',
            index=models.Index(fields=['report_week_start', 'status'], name='inventory_w_report__6804f3_idx'),
        ),
        migrations.AddIndex(
            model_name='weeklypricereport',
            index=models.Index(fields=['generated_at'], name='inventory_w_generat_f5a91d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklypricereport',
            unique_together={('report_week_start', 'report_week_end')},
        ),
    ]
